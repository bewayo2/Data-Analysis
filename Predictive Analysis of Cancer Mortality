{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8116544,"sourceType":"datasetVersion","datasetId":4795416}],"dockerImageVersionId":30684,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-04-19T18:11:50.433259Z","iopub.execute_input":"2024-04-19T18:11:50.433779Z","iopub.status.idle":"2024-04-19T18:11:50.454273Z","shell.execute_reply.started":"2024-04-19T18:11:50.433746Z","shell.execute_reply":"2024-04-19T18:11:50.452760Z"},"trusted":true},"execution_count":38,"outputs":[{"name":"stdout","text":"/kaggle/input/cancer-regression/cancer_reg.csv\n/kaggle/input/cancer-regression/avg_household_size_column.ipynb\n/kaggle/input/cancer-regression/avg-household-size.csv\n","output_type":"stream"}]},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"markdown","source":"## Objective\n\nThe primary goal of this analysis is to assist policymakers in identifying high-risk areas for targeted interventions to reduce mortality rates from cancer. By using demographic and health-related data, we aim to categorize regions based on the risk of death and the likelihood of missing target death rates. This will enable more effective allocation of resources to areas most in need.\n\n## Methodology and Rationale\n\n### Data Collection\n\nThe dataset comprises two CSV files containing health-related and demographic data across various regions:\n\n1. **Health Data**: Includes average annual cancer cases, death rates, incidence rates, and coverage details.\n2. **Demographic Data**: Provides geographical information and household sizes.\n\n### Data Processing\n\n#### Data Merging and Cleaning\n- **Merging**: The two datasets were merged on the 'geography' column to align demographic data with health statistics.\n- **Cleaning**: Missing values were identified and addressed. For instance, missing private coverage percentages were imputed based on the state averages of employment rates and existing coverage percentages.\n\n#### Feature Engineering\n- **New Metrics**: New features such as `death_rate_per_1000` and `diagnosis_rate_per_1000` were calculated to normalize the raw counts per population.\n- **Interactions**: Interaction terms (e.g., between unemployment and insurance coverage) were created to explore complex relationships.\n\n#### Polynomial Transformation\n- **Enhancing Features**: Polynomial features were generated for selected variables to capture non-linear relationships, potentially improving model performance.\n\n### Statistical Analysis\n- **Correlation Analysis**: Correlation coefficients were calculated to identify the strongest predictors of mortality and diagnosis rates.\n- **Visualization**: Heatmaps were used to visualize the relationships between variables, aiding in intuitive understanding of data interdependencies.\n\n### Model Building\n- **Model Selection**: Logistic regression models were chosen for their interpretability and efficiency in binary classification tasks.\n- **Training**: Models were trained on scaled features to prevent any single feature from dominating due to scale differences.\n- **Evaluation**: Accuracy, precision, recall, and F1-scores were calculated to assess model performance.\n\n## Outcomes\n\n### Model Performance\n- **Risk of Death Model**:\n  - **Accuracy**: Approximately 84.7%\n  - **Insights**: Features such as unemployment, public coverage, and median age were significant predictors.\n- **Risk of Missing Target Death Rate**:\n  - **Accuracy**: Approximately 86.2%\n  - **Insights**: Public coverage alone, employment rates, and education levels (bachelor's degrees) were critical.\n\n### Implications for Policy\nThese models provide valuable insights into the factors that contribute to higher cancer mortality and missed targets in regions. By understanding these relationships, policymakers can tailor interventions, such as enhancing healthcare access or educational programs, to mitigate risk factors in high-priority areas. This strategic approach aims at saving lives through targeted healthcare improvements and resource allocation.\n","metadata":{}},{"cell_type":"code","source":"demographic_data= pd.read_csv ('/kaggle/input/cancer-regression/avg-household-size.csv')\nhealth_data= pd.read_csv('/kaggle/input/cancer-regression/cancer_reg.csv')\n\n","metadata":{"execution":{"iopub.status.busy":"2024-04-19T18:11:50.482871Z","iopub.execute_input":"2024-04-19T18:11:50.483320Z","iopub.status.idle":"2024-04-19T18:11:50.517107Z","shell.execute_reply.started":"2024-04-19T18:11:50.483287Z","shell.execute_reply":"2024-04-19T18:11:50.515850Z"},"trusted":true},"execution_count":39,"outputs":[]},{"cell_type":"code","source":"# Print the column names of both datasets\nprint(\"Columns in health_data:\", health_data.columns)\nprint(\"Columns in demographic_data:\", demographic_data.columns)\n","metadata":{"execution":{"iopub.status.busy":"2024-04-19T18:11:50.552856Z","iopub.execute_input":"2024-04-19T18:11:50.553279Z","iopub.status.idle":"2024-04-19T18:11:50.560662Z","shell.execute_reply.started":"2024-04-19T18:11:50.553248Z","shell.execute_reply":"2024-04-19T18:11:50.559441Z"},"trusted":true},"execution_count":40,"outputs":[{"name":"stdout","text":"Columns in health_data: Index(['avganncount', 'avgdeathsperyear', 'target_deathrate', 'incidencerate',\n       'medincome', 'popest2015', 'povertypercent', 'studypercap', 'binnedinc',\n       'medianage', 'medianagemale', 'medianagefemale', 'geography',\n       'percentmarried', 'pctnohs18_24', 'pcths18_24', 'pctsomecol18_24',\n       'pctbachdeg18_24', 'pcths25_over', 'pctbachdeg25_over',\n       'pctemployed16_over', 'pctunemployed16_over', 'pctprivatecoverage',\n       'pctprivatecoveragealone', 'pctempprivcoverage', 'pctpubliccoverage',\n       'pctpubliccoveragealone', 'pctwhite', 'pctblack', 'pctasian',\n       'pctotherrace', 'pctmarriedhouseholds', 'birthrate'],\n      dtype='object')\nColumns in demographic_data: Index(['statefips', 'countyfips', 'avghouseholdsize', 'geography'], dtype='object')\n","output_type":"stream"}]},{"cell_type":"code","source":"health_data.head(10)","metadata":{"execution":{"iopub.status.busy":"2024-04-19T18:11:50.608954Z","iopub.execute_input":"2024-04-19T18:11:50.609422Z","iopub.status.idle":"2024-04-19T18:11:50.649267Z","shell.execute_reply.started":"2024-04-19T18:11:50.609386Z","shell.execute_reply":"2024-04-19T18:11:50.648027Z"},"trusted":true},"execution_count":41,"outputs":[{"execution_count":41,"output_type":"execute_result","data":{"text/plain":"   avganncount  avgdeathsperyear  target_deathrate  incidencerate  medincome  \\\n0       1397.0               469             164.9          489.8      61898   \n1        173.0                70             161.3          411.6      48127   \n2        102.0                50             174.7          349.7      49348   \n3        427.0               202             194.8          430.4      44243   \n4         57.0                26             144.4          350.1      49955   \n5        428.0               152             176.0          505.4      52313   \n6        250.0                97             175.9          461.8      37782   \n7        146.0                71             183.6          404.0      40189   \n8         88.0                36             190.5          459.4      42579   \n9       4025.0              1380             177.8          510.9      60397   \n\n   popest2015  povertypercent  studypercap           binnedinc  medianage  \\\n0      260131            11.2   499.748204   (61494.5, 125635]       39.3   \n1       43269            18.6    23.111234  (48021.6, 51046.4]       33.0   \n2       21026            14.6    47.560164  (48021.6, 51046.4]       45.0   \n3       75882            17.1   342.637253    (42724.4, 45201]       42.8   \n4       10321            12.5     0.000000  (48021.6, 51046.4]       48.3   \n5       61023            15.6   180.259902  (51046.4, 54545.6]       45.4   \n6       41516            23.2     0.000000  (37413.8, 40362.7]       42.6   \n7       20848            17.8     0.000000  (37413.8, 40362.7]       51.7   \n8       13088            22.3     0.000000  (40362.7, 42724.4]       49.3   \n9      843954            13.1   427.748432  (54545.6, 61494.5]       35.8   \n\n   ...  pctprivatecoveragealone  pctempprivcoverage pctpubliccoverage  \\\n0  ...                      NaN                41.6              32.9   \n1  ...                     53.8                43.6              31.1   \n2  ...                     43.5                34.9              42.1   \n3  ...                     40.3                35.0              45.3   \n4  ...                     43.9                35.1              44.0   \n5  ...                     38.8                32.6              43.2   \n6  ...                     35.0                28.3              46.4   \n7  ...                     33.1                25.9              50.9   \n8  ...                     37.8                29.9              48.1   \n9  ...                      NaN                44.4              31.4   \n\n   pctpubliccoveragealone   pctwhite  pctblack  pctasian  pctotherrace  \\\n0                    14.0  81.780529  2.594728  4.821857      1.843479   \n1                    15.3  89.228509  0.969102  2.246233      3.741352   \n2                    21.1  90.922190  0.739673  0.465898      2.747358   \n3                    25.0  91.744686  0.782626  1.161359      1.362643   \n4                    22.7  94.104024  0.270192  0.665830      0.492135   \n5                    20.2  84.882631  1.653205  1.538057      3.314635   \n6                    28.7  75.106455  0.616955  0.866157      8.356721   \n7                    24.1  89.406636  0.305159  1.889077      2.286268   \n8                    26.6  91.787477  0.185071  0.208205      0.616903   \n9                    16.5  74.729668  6.710854  6.041472      2.699184   \n\n   pctmarriedhouseholds  birthrate  \n0             52.856076   6.118831  \n1             45.372500   4.333096  \n2             54.444868   3.729488  \n3             51.021514   4.603841  \n4             54.027460   6.796657  \n5             51.220360   4.964476  \n6             51.013900   4.204317  \n7             48.967033   5.889179  \n8             53.446998   5.587583  \n9             50.063573   5.533430  \n\n[10 rows x 33 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>avganncount</th>\n      <th>avgdeathsperyear</th>\n      <th>target_deathrate</th>\n      <th>incidencerate</th>\n      <th>medincome</th>\n      <th>popest2015</th>\n      <th>povertypercent</th>\n      <th>studypercap</th>\n      <th>binnedinc</th>\n      <th>medianage</th>\n      <th>...</th>\n      <th>pctprivatecoveragealone</th>\n      <th>pctempprivcoverage</th>\n      <th>pctpubliccoverage</th>\n      <th>pctpubliccoveragealone</th>\n      <th>pctwhite</th>\n      <th>pctblack</th>\n      <th>pctasian</th>\n      <th>pctotherrace</th>\n      <th>pctmarriedhouseholds</th>\n      <th>birthrate</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1397.0</td>\n      <td>469</td>\n      <td>164.9</td>\n      <td>489.8</td>\n      <td>61898</td>\n      <td>260131</td>\n      <td>11.2</td>\n      <td>499.748204</td>\n      <td>(61494.5, 125635]</td>\n      <td>39.3</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>41.6</td>\n      <td>32.9</td>\n      <td>14.0</td>\n      <td>81.780529</td>\n      <td>2.594728</td>\n      <td>4.821857</td>\n      <td>1.843479</td>\n      <td>52.856076</td>\n      <td>6.118831</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>173.0</td>\n      <td>70</td>\n      <td>161.3</td>\n      <td>411.6</td>\n      <td>48127</td>\n      <td>43269</td>\n      <td>18.6</td>\n      <td>23.111234</td>\n      <td>(48021.6, 51046.4]</td>\n      <td>33.0</td>\n      <td>...</td>\n      <td>53.8</td>\n      <td>43.6</td>\n      <td>31.1</td>\n      <td>15.3</td>\n      <td>89.228509</td>\n      <td>0.969102</td>\n      <td>2.246233</td>\n      <td>3.741352</td>\n      <td>45.372500</td>\n      <td>4.333096</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>102.0</td>\n      <td>50</td>\n      <td>174.7</td>\n      <td>349.7</td>\n      <td>49348</td>\n      <td>21026</td>\n      <td>14.6</td>\n      <td>47.560164</td>\n      <td>(48021.6, 51046.4]</td>\n      <td>45.0</td>\n      <td>...</td>\n      <td>43.5</td>\n      <td>34.9</td>\n      <td>42.1</td>\n      <td>21.1</td>\n      <td>90.922190</td>\n      <td>0.739673</td>\n      <td>0.465898</td>\n      <td>2.747358</td>\n      <td>54.444868</td>\n      <td>3.729488</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>427.0</td>\n      <td>202</td>\n      <td>194.8</td>\n      <td>430.4</td>\n      <td>44243</td>\n      <td>75882</td>\n      <td>17.1</td>\n      <td>342.637253</td>\n      <td>(42724.4, 45201]</td>\n      <td>42.8</td>\n      <td>...</td>\n      <td>40.3</td>\n      <td>35.0</td>\n      <td>45.3</td>\n      <td>25.0</td>\n      <td>91.744686</td>\n      <td>0.782626</td>\n      <td>1.161359</td>\n      <td>1.362643</td>\n      <td>51.021514</td>\n      <td>4.603841</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>57.0</td>\n      <td>26</td>\n      <td>144.4</td>\n      <td>350.1</td>\n      <td>49955</td>\n      <td>10321</td>\n      <td>12.5</td>\n      <td>0.000000</td>\n      <td>(48021.6, 51046.4]</td>\n      <td>48.3</td>\n      <td>...</td>\n      <td>43.9</td>\n      <td>35.1</td>\n      <td>44.0</td>\n      <td>22.7</td>\n      <td>94.104024</td>\n      <td>0.270192</td>\n      <td>0.665830</td>\n      <td>0.492135</td>\n      <td>54.027460</td>\n      <td>6.796657</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>428.0</td>\n      <td>152</td>\n      <td>176.0</td>\n      <td>505.4</td>\n      <td>52313</td>\n      <td>61023</td>\n      <td>15.6</td>\n      <td>180.259902</td>\n      <td>(51046.4, 54545.6]</td>\n      <td>45.4</td>\n      <td>...</td>\n      <td>38.8</td>\n      <td>32.6</td>\n      <td>43.2</td>\n      <td>20.2</td>\n      <td>84.882631</td>\n      <td>1.653205</td>\n      <td>1.538057</td>\n      <td>3.314635</td>\n      <td>51.220360</td>\n      <td>4.964476</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>250.0</td>\n      <td>97</td>\n      <td>175.9</td>\n      <td>461.8</td>\n      <td>37782</td>\n      <td>41516</td>\n      <td>23.2</td>\n      <td>0.000000</td>\n      <td>(37413.8, 40362.7]</td>\n      <td>42.6</td>\n      <td>...</td>\n      <td>35.0</td>\n      <td>28.3</td>\n      <td>46.4</td>\n      <td>28.7</td>\n      <td>75.106455</td>\n      <td>0.616955</td>\n      <td>0.866157</td>\n      <td>8.356721</td>\n      <td>51.013900</td>\n      <td>4.204317</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>146.0</td>\n      <td>71</td>\n      <td>183.6</td>\n      <td>404.0</td>\n      <td>40189</td>\n      <td>20848</td>\n      <td>17.8</td>\n      <td>0.000000</td>\n      <td>(37413.8, 40362.7]</td>\n      <td>51.7</td>\n      <td>...</td>\n      <td>33.1</td>\n      <td>25.9</td>\n      <td>50.9</td>\n      <td>24.1</td>\n      <td>89.406636</td>\n      <td>0.305159</td>\n      <td>1.889077</td>\n      <td>2.286268</td>\n      <td>48.967033</td>\n      <td>5.889179</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>88.0</td>\n      <td>36</td>\n      <td>190.5</td>\n      <td>459.4</td>\n      <td>42579</td>\n      <td>13088</td>\n      <td>22.3</td>\n      <td>0.000000</td>\n      <td>(40362.7, 42724.4]</td>\n      <td>49.3</td>\n      <td>...</td>\n      <td>37.8</td>\n      <td>29.9</td>\n      <td>48.1</td>\n      <td>26.6</td>\n      <td>91.787477</td>\n      <td>0.185071</td>\n      <td>0.208205</td>\n      <td>0.616903</td>\n      <td>53.446998</td>\n      <td>5.587583</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>4025.0</td>\n      <td>1380</td>\n      <td>177.8</td>\n      <td>510.9</td>\n      <td>60397</td>\n      <td>843954</td>\n      <td>13.1</td>\n      <td>427.748432</td>\n      <td>(54545.6, 61494.5]</td>\n      <td>35.8</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>44.4</td>\n      <td>31.4</td>\n      <td>16.5</td>\n      <td>74.729668</td>\n      <td>6.710854</td>\n      <td>6.041472</td>\n      <td>2.699184</td>\n      <td>50.063573</td>\n      <td>5.533430</td>\n    </tr>\n  </tbody>\n</table>\n<p>10 rows × 33 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"demographic_data.head(10)","metadata":{"execution":{"iopub.status.busy":"2024-04-19T18:11:50.656455Z","iopub.execute_input":"2024-04-19T18:11:50.656902Z","iopub.status.idle":"2024-04-19T18:11:50.670558Z","shell.execute_reply.started":"2024-04-19T18:11:50.656871Z","shell.execute_reply":"2024-04-19T18:11:50.669067Z"},"trusted":true},"execution_count":42,"outputs":[{"execution_count":42,"output_type":"execute_result","data":{"text/plain":"   statefips  countyfips  avghouseholdsize  \\\n0          2          13              2.43   \n1          2          16              3.59   \n2          2          20              2.77   \n3          2          50              3.86   \n4          2          60              2.50   \n5          2          68              2.34   \n6          2          70              3.56   \n7          2          90              2.69   \n8          2         100              2.12   \n9          2         105              2.26   \n\n                              geography  \n0        Aleutians East Borough, Alaska  \n1    Aleutians West Census Area, Alaska  \n2        Anchorage Municipality, Alaska  \n3            Bethel Census Area, Alaska  \n4           Bristol Bay Borough, Alaska  \n5                Denali Borough, Alaska  \n6        Dillingham Census Area, Alaska  \n7  Fairbanks North Star Borough, Alaska  \n8                Haines Borough, Alaska  \n9     Hoonah-Angoon Census Area, Alaska  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>statefips</th>\n      <th>countyfips</th>\n      <th>avghouseholdsize</th>\n      <th>geography</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2</td>\n      <td>13</td>\n      <td>2.43</td>\n      <td>Aleutians East Borough, Alaska</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>16</td>\n      <td>3.59</td>\n      <td>Aleutians West Census Area, Alaska</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>20</td>\n      <td>2.77</td>\n      <td>Anchorage Municipality, Alaska</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2</td>\n      <td>50</td>\n      <td>3.86</td>\n      <td>Bethel Census Area, Alaska</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2</td>\n      <td>60</td>\n      <td>2.50</td>\n      <td>Bristol Bay Borough, Alaska</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2</td>\n      <td>68</td>\n      <td>2.34</td>\n      <td>Denali Borough, Alaska</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>2</td>\n      <td>70</td>\n      <td>3.56</td>\n      <td>Dillingham Census Area, Alaska</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>2</td>\n      <td>90</td>\n      <td>2.69</td>\n      <td>Fairbanks North Star Borough, Alaska</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>2</td>\n      <td>100</td>\n      <td>2.12</td>\n      <td>Haines Borough, Alaska</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>2</td>\n      <td>105</td>\n      <td>2.26</td>\n      <td>Hoonah-Angoon Census Area, Alaska</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# Merge the datasets on the 'geography' column\nmerged_data = pd.merge(health_data, demographic_data, on='geography', how='inner')\nmerged_data.to_csv('merged_data.csv', index=False)\nprint(merged_data.head())","metadata":{"execution":{"iopub.status.busy":"2024-04-19T18:11:50.704034Z","iopub.execute_input":"2024-04-19T18:11:50.704499Z","iopub.status.idle":"2024-04-19T18:11:50.868230Z","shell.execute_reply.started":"2024-04-19T18:11:50.704464Z","shell.execute_reply":"2024-04-19T18:11:50.867034Z"},"trusted":true},"execution_count":43,"outputs":[{"name":"stdout","text":"   avganncount  avgdeathsperyear  target_deathrate  incidencerate  medincome  \\\n0       1397.0               469             164.9          489.8      61898   \n1        173.0                70             161.3          411.6      48127   \n2        102.0                50             174.7          349.7      49348   \n3        427.0               202             194.8          430.4      44243   \n4         57.0                26             144.4          350.1      49955   \n\n   popest2015  povertypercent  studypercap           binnedinc  medianage  \\\n0      260131            11.2   499.748204   (61494.5, 125635]       39.3   \n1       43269            18.6    23.111234  (48021.6, 51046.4]       33.0   \n2       21026            14.6    47.560164  (48021.6, 51046.4]       45.0   \n3       75882            17.1   342.637253    (42724.4, 45201]       42.8   \n4       10321            12.5     0.000000  (48021.6, 51046.4]       48.3   \n\n   ...  pctpubliccoveragealone   pctwhite  pctblack  pctasian  pctotherrace  \\\n0  ...                    14.0  81.780529  2.594728  4.821857      1.843479   \n1  ...                    15.3  89.228509  0.969102  2.246233      3.741352   \n2  ...                    21.1  90.922190  0.739673  0.465898      2.747358   \n3  ...                    25.0  91.744686  0.782626  1.161359      1.362643   \n4  ...                    22.7  94.104024  0.270192  0.665830      0.492135   \n\n   pctmarriedhouseholds  birthrate  statefips  countyfips  avghouseholdsize  \n0             52.856076   6.118831         53          35              2.54  \n1             45.372500   4.333096         53          37              2.34  \n2             54.444868   3.729488         53          39              2.62  \n3             51.021514   4.603841         53          41              2.52  \n4             54.027460   6.796657         53          43              2.34  \n\n[5 rows x 36 columns]\n","output_type":"stream"}]},{"cell_type":"code","source":"merged_data = pd.read_csv('merged_data.csv')\n\n# Check for missing data\nprint(\"Missing data in each column:\\n\", merged_data.isnull().sum())\n\n# Check the data types and other information\nprint(\"\\nData types and additional information:\")\nmerged_data.info()","metadata":{"execution":{"iopub.status.busy":"2024-04-19T18:11:50.870304Z","iopub.execute_input":"2024-04-19T18:11:50.870683Z","iopub.status.idle":"2024-04-19T18:11:50.910915Z","shell.execute_reply.started":"2024-04-19T18:11:50.870653Z","shell.execute_reply":"2024-04-19T18:11:50.909760Z"},"trusted":true},"execution_count":44,"outputs":[{"name":"stdout","text":"Missing data in each column:\n avganncount                   0\navgdeathsperyear              0\ntarget_deathrate              0\nincidencerate                 0\nmedincome                     0\npopest2015                    0\npovertypercent                0\nstudypercap                   0\nbinnedinc                     0\nmedianage                     0\nmedianagemale                 0\nmedianagefemale               0\ngeography                     0\npercentmarried                0\npctnohs18_24                  0\npcths18_24                    0\npctsomecol18_24            2285\npctbachdeg18_24               0\npcths25_over                  0\npctbachdeg25_over             0\npctemployed16_over          152\npctunemployed16_over          0\npctprivatecoverage            0\npctprivatecoveragealone     609\npctempprivcoverage            0\npctpubliccoverage             0\npctpubliccoveragealone        0\npctwhite                      0\npctblack                      0\npctasian                      0\npctotherrace                  0\npctmarriedhouseholds          0\nbirthrate                     0\nstatefips                     0\ncountyfips                    0\navghouseholdsize              0\ndtype: int64\n\nData types and additional information:\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 3047 entries, 0 to 3046\nData columns (total 36 columns):\n #   Column                   Non-Null Count  Dtype  \n---  ------                   --------------  -----  \n 0   avganncount              3047 non-null   float64\n 1   avgdeathsperyear         3047 non-null   int64  \n 2   target_deathrate         3047 non-null   float64\n 3   incidencerate            3047 non-null   float64\n 4   medincome                3047 non-null   int64  \n 5   popest2015               3047 non-null   int64  \n 6   povertypercent           3047 non-null   float64\n 7   studypercap              3047 non-null   float64\n 8   binnedinc                3047 non-null   object \n 9   medianage                3047 non-null   float64\n 10  medianagemale            3047 non-null   float64\n 11  medianagefemale          3047 non-null   float64\n 12  geography                3047 non-null   object \n 13  percentmarried           3047 non-null   float64\n 14  pctnohs18_24             3047 non-null   float64\n 15  pcths18_24               3047 non-null   float64\n 16  pctsomecol18_24          762 non-null    float64\n 17  pctbachdeg18_24          3047 non-null   float64\n 18  pcths25_over             3047 non-null   float64\n 19  pctbachdeg25_over        3047 non-null   float64\n 20  pctemployed16_over       2895 non-null   float64\n 21  pctunemployed16_over     3047 non-null   float64\n 22  pctprivatecoverage       3047 non-null   float64\n 23  pctprivatecoveragealone  2438 non-null   float64\n 24  pctempprivcoverage       3047 non-null   float64\n 25  pctpubliccoverage        3047 non-null   float64\n 26  pctpubliccoveragealone   3047 non-null   float64\n 27  pctwhite                 3047 non-null   float64\n 28  pctblack                 3047 non-null   float64\n 29  pctasian                 3047 non-null   float64\n 30  pctotherrace             3047 non-null   float64\n 31  pctmarriedhouseholds     3047 non-null   float64\n 32  birthrate                3047 non-null   float64\n 33  statefips                3047 non-null   int64  \n 34  countyfips               3047 non-null   int64  \n 35  avghouseholdsize         3047 non-null   float64\ndtypes: float64(29), int64(5), object(2)\nmemory usage: 857.1+ KB\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Examine missing private coverage\n","metadata":{}},{"cell_type":"code","source":"# Filter the rows where 'pctprivatecoveragealone' is NaN\nmissing_coverage_data = merged_data[merged_data['pctprivatecoveragealone'].isnull()]\n\n# Display the first 10 rows of this subset\nprint(missing_coverage_data.head(10))\n","metadata":{"execution":{"iopub.status.busy":"2024-04-19T18:11:50.912477Z","iopub.execute_input":"2024-04-19T18:11:50.913493Z","iopub.status.idle":"2024-04-19T18:11:50.933174Z","shell.execute_reply.started":"2024-04-19T18:11:50.913458Z","shell.execute_reply":"2024-04-19T18:11:50.932073Z"},"trusted":true},"execution_count":45,"outputs":[{"name":"stdout","text":"    avganncount  avgdeathsperyear  target_deathrate  incidencerate  medincome  \\\n0        1397.0               469             164.9          489.8      61898   \n9        4025.0              1380             177.8          510.9      60397   \n10        113.0                36             121.4          413.3      54721   \n11        740.0               269             172.7          499.3      51395   \n23        499.0               215             206.1          463.1      56737   \n32         45.0                21             209.9          463.1      32705   \n37         68.0                29             153.0          374.9      41010   \n46        373.0               144             188.8          510.9      43729   \n49        418.0               184             210.0          493.8      35046   \n54        105.0                52             209.7          425.4      44446   \n\n    popest2015  povertypercent  studypercap           binnedinc  medianage  \\\n0       260131            11.2   499.748204   (61494.5, 125635]       39.3   \n9       843954            13.1   427.748432  (54545.6, 61494.5]       35.8   \n10       16252            12.7     0.000000  (54545.6, 61494.5]       54.4   \n11      121846            15.7   837.122269  (51046.4, 54545.6]       41.0   \n23      111901            13.2    89.364706  (54545.6, 61494.5]       38.4   \n32        8518            28.9     0.000000    [22640, 34218.1]       38.4   \n37       13852            15.3     0.000000  (40362.7, 42724.4]       44.5   \n46       56925            17.9     0.000000    (42724.4, 45201]       41.1   \n49       61164            20.5    81.747433  (34218.1, 37413.8]       42.3   \n54       17524            13.0     0.000000    (42724.4, 45201]       46.1   \n\n    ...  pctpubliccoveragealone   pctwhite   pctblack  pctasian  pctotherrace  \\\n0   ...                    14.0  81.780529   2.594728  4.821857      1.843479   \n9   ...                    16.5  74.729668   6.710854  6.041472      2.699184   \n10  ...                    18.3  92.573327   0.651792  1.428930      2.237403   \n11  ...                    20.2  85.590273   0.806080  1.887836      6.226591   \n23  ...                    17.3  87.801221   7.333247  1.052206      0.905964   \n32  ...                    18.8  81.559463  10.897733  0.323924      1.353540   \n37  ...                    19.1  94.690011   4.355626  0.466418      0.215270   \n46  ...                    18.3  93.954922   3.622117  0.515936      0.000000   \n49  ...                    27.1  91.142492   5.857071  0.654376      0.177732   \n54  ...                    17.3  97.356223   0.772532  0.417740      0.000000   \n\n    pctmarriedhouseholds  birthrate  statefips  countyfips  avghouseholdsize  \n0              52.856076   6.118831         53          35              2.54  \n9              50.063573   5.533430         53          53              2.65  \n10             50.038921   4.586130         53          55              2.04  \n11             52.937327   5.818153         53          57              2.56  \n23             51.523505   4.872468         54           3              2.63  \n32             52.587464   2.328431         54          21              2.40  \n37             51.415826   2.955003         54          31              2.69  \n46             49.463992   5.113460         54          49              2.47  \n49             48.371380   4.807972         54          55              2.39  \n54             45.141535   4.090036         54          65              2.36  \n\n[10 rows x 36 columns]\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Use the national relationship between employment and private coverage to impute the missing private coverage figures assuming similar relationship locally","metadata":{}},{"cell_type":"code","source":"# Calculate the mean employment rate and private coverage alone for each state\nstate_averages = merged_data.groupby('statefips').agg({\n    'pctemployed16_over': 'mean',\n    'pctprivatecoveragealone': 'mean'\n}).reset_index()\n\n# Rename columns for clarity\nstate_averages.rename(columns={\n    'pctemployed16_over': 'mean_employment_rate',\n    'pctprivatecoveragealone': 'mean_private_coverage'\n}, inplace=True)\n\n# Merge the state averages back to the main DataFrame\nmerged_data = pd.merge(merged_data, state_averages, on='statefips')\n\n# Calculate the expected private coverage based on the employment rate for each row\nmerged_data['expected_private_coverage'] = (merged_data['pctemployed16_over'] / merged_data['mean_employment_rate']) * merged_data['mean_private_coverage']\n\n# Impute missing 'pctprivatecoveragealone' using the 'expected_private_coverage'\nmerged_data.loc[merged_data['pctprivatecoveragealone'].isnull(), 'pctprivatecoveragealone'] = merged_data['expected_private_coverage']\n\n# Check if there are any remaining missing values in 'pctprivatecoveragealone'\nprint(merged_data['pctprivatecoveragealone'].isnull().sum())\n\n","metadata":{"execution":{"iopub.status.busy":"2024-04-19T18:11:50.935553Z","iopub.execute_input":"2024-04-19T18:11:50.936542Z","iopub.status.idle":"2024-04-19T18:11:50.956608Z","shell.execute_reply.started":"2024-04-19T18:11:50.936504Z","shell.execute_reply":"2024-04-19T18:11:50.954994Z"},"trusted":true},"execution_count":46,"outputs":[{"name":"stdout","text":"46\n","output_type":"stream"}]},{"cell_type":"code","source":"# Recalculate the mean employment rate for each state excluding missing values\nstate_employment_averages = merged_data.groupby('statefips')['pctemployed16_over'].mean().reset_index()\nstate_employment_averages.rename(columns={'pctemployed16_over': 'mean_employment_rate'}, inplace=True)\n\n# Ensure the renaming took place (debug print)\nprint(state_employment_averages.head())\n","metadata":{"execution":{"iopub.status.busy":"2024-04-19T18:11:50.957892Z","iopub.execute_input":"2024-04-19T18:11:50.958235Z","iopub.status.idle":"2024-04-19T18:11:50.970230Z","shell.execute_reply.started":"2024-04-19T18:11:50.958207Z","shell.execute_reply":"2024-04-19T18:11:50.968864Z"},"trusted":true},"execution_count":47,"outputs":[{"name":"stdout","text":"   statefips  mean_employment_rate\n0          1             47.921667\n1          2             60.681250\n2          4             45.366667\n3          5             49.246479\n4          6             52.069091\n","output_type":"stream"}]},{"cell_type":"code","source":"# Merge the state averages back into the main DataFrame correctly\nmerged_data = pd.merge(merged_data, state_employment_averages, on='statefips', how='left')\n\n# Check if the new columns are in merged_data (optional debug print)\nprint(merged_data.columns)\n","metadata":{"execution":{"iopub.status.busy":"2024-04-19T18:11:50.972481Z","iopub.execute_input":"2024-04-19T18:11:50.972982Z","iopub.status.idle":"2024-04-19T18:11:50.985027Z","shell.execute_reply.started":"2024-04-19T18:11:50.972950Z","shell.execute_reply":"2024-04-19T18:11:50.984135Z"},"trusted":true},"execution_count":48,"outputs":[{"name":"stdout","text":"Index(['avganncount', 'avgdeathsperyear', 'target_deathrate', 'incidencerate',\n       'medincome', 'popest2015', 'povertypercent', 'studypercap', 'binnedinc',\n       'medianage', 'medianagemale', 'medianagefemale', 'geography',\n       'percentmarried', 'pctnohs18_24', 'pcths18_24', 'pctsomecol18_24',\n       'pctbachdeg18_24', 'pcths25_over', 'pctbachdeg25_over',\n       'pctemployed16_over', 'pctunemployed16_over', 'pctprivatecoverage',\n       'pctprivatecoveragealone', 'pctempprivcoverage', 'pctpubliccoverage',\n       'pctpubliccoveragealone', 'pctwhite', 'pctblack', 'pctasian',\n       'pctotherrace', 'pctmarriedhouseholds', 'birthrate', 'statefips',\n       'countyfips', 'avghouseholdsize', 'mean_employment_rate_x',\n       'mean_private_coverage', 'expected_private_coverage',\n       'mean_employment_rate_y'],\n      dtype='object')\n","output_type":"stream"}]},{"cell_type":"code","source":"# Fill missing 'pctemployed16_over' with 'mean_employment_rate'\nmerged_data.loc[merged_data['pctemployed16_over'].isnull(), 'pctemployed16_over'] = merged_data['mean_employment_rate_x']\n\n# Check if filling was successful (optional debug print)\nprint(merged_data['pctemployed16_over'].isnull().sum())\n","metadata":{"execution":{"iopub.status.busy":"2024-04-19T18:11:51.007622Z","iopub.execute_input":"2024-04-19T18:11:51.008368Z","iopub.status.idle":"2024-04-19T18:11:51.016759Z","shell.execute_reply.started":"2024-04-19T18:11:51.008318Z","shell.execute_reply":"2024-04-19T18:11:51.015630Z"},"trusted":true},"execution_count":49,"outputs":[{"name":"stdout","text":"0\n","output_type":"stream"}]},{"cell_type":"code","source":"# Update state means including the newly imputed 'pctemployed16_over'\nupdated_state_averages = merged_data.groupby('statefips').agg({\n    'pctemployed16_over': 'mean',\n    'pctprivatecoveragealone': 'mean'\n}).reset_index()\nupdated_state_averages.rename(columns={\n    'pctemployed16_over': 'updated_mean_employment_rate',\n    'pctprivatecoveragealone': 'updated_mean_private_coverage'\n}, inplace=True)\n\n# Merge updated averages\nmerged_data = pd.merge(merged_data, updated_state_averages, on='statefips', how='left')\n\n# Calculate updated expected private coverage and impute\nmerged_data['updated_expected_private_coverage'] = (merged_data['pctemployed16_over'] / merged_data['updated_mean_employment_rate']) * merged_data['updated_mean_private_coverage']\nmerged_data.loc[merged_data['pctprivatecoveragealone'].isnull(), 'pctprivatecoveragealone'] = merged_data['updated_expected_private_coverage']\n\n# Final check for missing values\nprint(\"Remaining missing 'pctprivatecoveragealone':\", merged_data['pctprivatecoveragealone'].isnull().sum())\n","metadata":{"execution":{"iopub.status.busy":"2024-04-19T18:11:51.060190Z","iopub.execute_input":"2024-04-19T18:11:51.060662Z","iopub.status.idle":"2024-04-19T18:11:51.079306Z","shell.execute_reply.started":"2024-04-19T18:11:51.060628Z","shell.execute_reply":"2024-04-19T18:11:51.078104Z"},"trusted":true},"execution_count":50,"outputs":[{"name":"stdout","text":"Remaining missing 'pctprivatecoveragealone': 0\n","output_type":"stream"}]},{"cell_type":"code","source":"merged_data.columns","metadata":{"execution":{"iopub.status.busy":"2024-04-19T18:11:51.099272Z","iopub.execute_input":"2024-04-19T18:11:51.100126Z","iopub.status.idle":"2024-04-19T18:11:51.107633Z","shell.execute_reply.started":"2024-04-19T18:11:51.100067Z","shell.execute_reply":"2024-04-19T18:11:51.106508Z"},"trusted":true},"execution_count":51,"outputs":[{"execution_count":51,"output_type":"execute_result","data":{"text/plain":"Index(['avganncount', 'avgdeathsperyear', 'target_deathrate', 'incidencerate',\n       'medincome', 'popest2015', 'povertypercent', 'studypercap', 'binnedinc',\n       'medianage', 'medianagemale', 'medianagefemale', 'geography',\n       'percentmarried', 'pctnohs18_24', 'pcths18_24', 'pctsomecol18_24',\n       'pctbachdeg18_24', 'pcths25_over', 'pctbachdeg25_over',\n       'pctemployed16_over', 'pctunemployed16_over', 'pctprivatecoverage',\n       'pctprivatecoveragealone', 'pctempprivcoverage', 'pctpubliccoverage',\n       'pctpubliccoveragealone', 'pctwhite', 'pctblack', 'pctasian',\n       'pctotherrace', 'pctmarriedhouseholds', 'birthrate', 'statefips',\n       'countyfips', 'avghouseholdsize', 'mean_employment_rate_x',\n       'mean_private_coverage', 'expected_private_coverage',\n       'mean_employment_rate_y', 'updated_mean_employment_rate',\n       'updated_mean_private_coverage', 'updated_expected_private_coverage'],\n      dtype='object')"},"metadata":{}}]},{"cell_type":"code","source":"\nmerged_data.drop(['updated_mean_employment_rate',\n       'updated_mean_private_coverage', 'updated_expected_private_coverage','mean_employment_rate_y', 'mean_employment_rate_x'], axis=1, inplace=True)\n\n\n","metadata":{"execution":{"iopub.status.busy":"2024-04-19T18:11:51.137373Z","iopub.execute_input":"2024-04-19T18:11:51.138192Z","iopub.status.idle":"2024-04-19T18:11:51.143740Z","shell.execute_reply.started":"2024-04-19T18:11:51.138155Z","shell.execute_reply":"2024-04-19T18:11:51.142867Z"},"trusted":true},"execution_count":52,"outputs":[]},{"cell_type":"code","source":"\nmerged_data.to_csv('merged_data_processed.csv', index=False)\n","metadata":{"execution":{"iopub.status.busy":"2024-04-19T18:11:51.185120Z","iopub.execute_input":"2024-04-19T18:11:51.185819Z","iopub.status.idle":"2024-04-19T18:11:51.336509Z","shell.execute_reply.started":"2024-04-19T18:11:51.185788Z","shell.execute_reply":"2024-04-19T18:11:51.335360Z"},"trusted":true},"execution_count":53,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Load the processed dataset\nprocessed_data = pd.read_csv('merged_data_processed.csv')\n\n# Check for missing data\nprint(\"Missing data in each column of the processed data:\\n\", processed_data.isnull().sum())\n\n# Check the data types and other information\nprint(\"\\nData types and additional information of the processed data:\")\nprocessed_data.info()\n","metadata":{"execution":{"iopub.status.busy":"2024-04-19T18:11:51.338571Z","iopub.execute_input":"2024-04-19T18:11:51.338925Z","iopub.status.idle":"2024-04-19T18:11:51.381239Z","shell.execute_reply.started":"2024-04-19T18:11:51.338894Z","shell.execute_reply":"2024-04-19T18:11:51.380087Z"},"trusted":true},"execution_count":54,"outputs":[{"name":"stdout","text":"Missing data in each column of the processed data:\n avganncount                     0\navgdeathsperyear                0\ntarget_deathrate                0\nincidencerate                   0\nmedincome                       0\npopest2015                      0\npovertypercent                  0\nstudypercap                     0\nbinnedinc                       0\nmedianage                       0\nmedianagemale                   0\nmedianagefemale                 0\ngeography                       0\npercentmarried                  0\npctnohs18_24                    0\npcths18_24                      0\npctsomecol18_24              2285\npctbachdeg18_24                 0\npcths25_over                    0\npctbachdeg25_over               0\npctemployed16_over              0\npctunemployed16_over            0\npctprivatecoverage              0\npctprivatecoveragealone         0\npctempprivcoverage              0\npctpubliccoverage               0\npctpubliccoveragealone          0\npctwhite                        0\npctblack                        0\npctasian                        0\npctotherrace                    0\npctmarriedhouseholds            0\nbirthrate                       0\nstatefips                       0\ncountyfips                      0\navghouseholdsize                0\nmean_private_coverage           0\nexpected_private_coverage     152\ndtype: int64\n\nData types and additional information of the processed data:\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 3047 entries, 0 to 3046\nData columns (total 38 columns):\n #   Column                     Non-Null Count  Dtype  \n---  ------                     --------------  -----  \n 0   avganncount                3047 non-null   float64\n 1   avgdeathsperyear           3047 non-null   int64  \n 2   target_deathrate           3047 non-null   float64\n 3   incidencerate              3047 non-null   float64\n 4   medincome                  3047 non-null   int64  \n 5   popest2015                 3047 non-null   int64  \n 6   povertypercent             3047 non-null   float64\n 7   studypercap                3047 non-null   float64\n 8   binnedinc                  3047 non-null   object \n 9   medianage                  3047 non-null   float64\n 10  medianagemale              3047 non-null   float64\n 11  medianagefemale            3047 non-null   float64\n 12  geography                  3047 non-null   object \n 13  percentmarried             3047 non-null   float64\n 14  pctnohs18_24               3047 non-null   float64\n 15  pcths18_24                 3047 non-null   float64\n 16  pctsomecol18_24            762 non-null    float64\n 17  pctbachdeg18_24            3047 non-null   float64\n 18  pcths25_over               3047 non-null   float64\n 19  pctbachdeg25_over          3047 non-null   float64\n 20  pctemployed16_over         3047 non-null   float64\n 21  pctunemployed16_over       3047 non-null   float64\n 22  pctprivatecoverage         3047 non-null   float64\n 23  pctprivatecoveragealone    3047 non-null   float64\n 24  pctempprivcoverage         3047 non-null   float64\n 25  pctpubliccoverage          3047 non-null   float64\n 26  pctpubliccoveragealone     3047 non-null   float64\n 27  pctwhite                   3047 non-null   float64\n 28  pctblack                   3047 non-null   float64\n 29  pctasian                   3047 non-null   float64\n 30  pctotherrace               3047 non-null   float64\n 31  pctmarriedhouseholds       3047 non-null   float64\n 32  birthrate                  3047 non-null   float64\n 33  statefips                  3047 non-null   int64  \n 34  countyfips                 3047 non-null   int64  \n 35  avghouseholdsize           3047 non-null   float64\n 36  mean_private_coverage      3047 non-null   float64\n 37  expected_private_coverage  2895 non-null   float64\ndtypes: float64(31), int64(5), object(2)\nmemory usage: 904.7+ KB\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n","metadata":{"execution":{"iopub.status.busy":"2024-04-19T18:11:51.382952Z","iopub.execute_input":"2024-04-19T18:11:51.383654Z","iopub.status.idle":"2024-04-19T18:11:51.388938Z","shell.execute_reply.started":"2024-04-19T18:11:51.383616Z","shell.execute_reply":"2024-04-19T18:11:51.387872Z"},"trusted":true},"execution_count":55,"outputs":[]},{"cell_type":"code","source":"data = pd.read_csv('merged_data_processed.csv')\ndata.head(), data.dtypes","metadata":{"execution":{"iopub.status.busy":"2024-04-19T18:11:51.391576Z","iopub.execute_input":"2024-04-19T18:11:51.392141Z","iopub.status.idle":"2024-04-19T18:11:51.442008Z","shell.execute_reply.started":"2024-04-19T18:11:51.392071Z","shell.execute_reply":"2024-04-19T18:11:51.440996Z"},"trusted":true},"execution_count":56,"outputs":[{"execution_count":56,"output_type":"execute_result","data":{"text/plain":"(   avganncount  avgdeathsperyear  target_deathrate  incidencerate  medincome  \\\n 0       1397.0               469             164.9          489.8      61898   \n 1        173.0                70             161.3          411.6      48127   \n 2        102.0                50             174.7          349.7      49348   \n 3        427.0               202             194.8          430.4      44243   \n 4         57.0                26             144.4          350.1      49955   \n \n    popest2015  povertypercent  studypercap           binnedinc  medianage  \\\n 0      260131            11.2   499.748204   (61494.5, 125635]       39.3   \n 1       43269            18.6    23.111234  (48021.6, 51046.4]       33.0   \n 2       21026            14.6    47.560164  (48021.6, 51046.4]       45.0   \n 3       75882            17.1   342.637253    (42724.4, 45201]       42.8   \n 4       10321            12.5     0.000000  (48021.6, 51046.4]       48.3   \n \n    ...  pctblack  pctasian pctotherrace  pctmarriedhouseholds  birthrate  \\\n 0  ...  2.594728  4.821857     1.843479             52.856076   6.118831   \n 1  ...  0.969102  2.246233     3.741352             45.372500   4.333096   \n 2  ...  0.739673  0.465898     2.747358             54.444868   3.729488   \n 3  ...  0.782626  1.161359     1.362643             51.021514   4.603841   \n 4  ...  0.270192  0.665830     0.492135             54.027460   6.796657   \n \n    statefips  countyfips  avghouseholdsize  mean_private_coverage  \\\n 0         53          35              2.54              45.193333   \n 1         53          37              2.34              45.193333   \n 2         53          39              2.62              45.193333   \n 3         53          41              2.52              45.193333   \n 4         53          43              2.34              45.193333   \n \n    expected_private_coverage  \n 0                  45.509467  \n 1                  49.016941  \n 2                  40.248257  \n 3                  42.352741  \n 4                  42.265055  \n \n [5 rows x 38 columns],\n avganncount                  float64\n avgdeathsperyear               int64\n target_deathrate             float64\n incidencerate                float64\n medincome                      int64\n popest2015                     int64\n povertypercent               float64\n studypercap                  float64\n binnedinc                     object\n medianage                    float64\n medianagemale                float64\n medianagefemale              float64\n geography                     object\n percentmarried               float64\n pctnohs18_24                 float64\n pcths18_24                   float64\n pctsomecol18_24              float64\n pctbachdeg18_24              float64\n pcths25_over                 float64\n pctbachdeg25_over            float64\n pctemployed16_over           float64\n pctunemployed16_over         float64\n pctprivatecoverage           float64\n pctprivatecoveragealone      float64\n pctempprivcoverage           float64\n pctpubliccoverage            float64\n pctpubliccoveragealone       float64\n pctwhite                     float64\n pctblack                     float64\n pctasian                     float64\n pctotherrace                 float64\n pctmarriedhouseholds         float64\n birthrate                    float64\n statefips                      int64\n countyfips                     int64\n avghouseholdsize             float64\n mean_private_coverage        float64\n expected_private_coverage    float64\n dtype: object)"},"metadata":{}}]},{"cell_type":"code","source":"data.columns","metadata":{"execution":{"iopub.status.busy":"2024-04-19T18:11:51.444134Z","iopub.execute_input":"2024-04-19T18:11:51.444475Z","iopub.status.idle":"2024-04-19T18:11:51.451995Z","shell.execute_reply.started":"2024-04-19T18:11:51.444449Z","shell.execute_reply":"2024-04-19T18:11:51.450874Z"},"trusted":true},"execution_count":57,"outputs":[{"execution_count":57,"output_type":"execute_result","data":{"text/plain":"Index(['avganncount', 'avgdeathsperyear', 'target_deathrate', 'incidencerate',\n       'medincome', 'popest2015', 'povertypercent', 'studypercap', 'binnedinc',\n       'medianage', 'medianagemale', 'medianagefemale', 'geography',\n       'percentmarried', 'pctnohs18_24', 'pcths18_24', 'pctsomecol18_24',\n       'pctbachdeg18_24', 'pcths25_over', 'pctbachdeg25_over',\n       'pctemployed16_over', 'pctunemployed16_over', 'pctprivatecoverage',\n       'pctprivatecoveragealone', 'pctempprivcoverage', 'pctpubliccoverage',\n       'pctpubliccoveragealone', 'pctwhite', 'pctblack', 'pctasian',\n       'pctotherrace', 'pctmarriedhouseholds', 'birthrate', 'statefips',\n       'countyfips', 'avghouseholdsize', 'mean_private_coverage',\n       'expected_private_coverage'],\n      dtype='object')"},"metadata":{}},{"execution_count":57,"output_type":"execute_result","data":{"text/plain":"Index(['avganncount', 'avgdeathsperyear', 'target_deathrate', 'incidencerate',\n       'medincome', 'popest2015', 'povertypercent', 'studypercap', 'binnedinc',\n       'medianage', 'medianagemale', 'medianagefemale', 'geography',\n       'percentmarried', 'pctnohs18_24', 'pcths18_24', 'pctsomecol18_24',\n       'pctbachdeg18_24', 'pcths25_over', 'pctbachdeg25_over',\n       'pctemployed16_over', 'pctunemployed16_over', 'pctprivatecoverage',\n       'pctprivatecoveragealone', 'pctempprivcoverage', 'pctpubliccoverage',\n       'pctpubliccoveragealone', 'pctwhite', 'pctblack', 'pctasian',\n       'pctotherrace', 'pctmarriedhouseholds', 'birthrate', 'statefips',\n       'countyfips', 'avghouseholdsize', 'mean_private_coverage',\n       'expected_private_coverage'],\n      dtype='object')"},"metadata":{}}]},{"cell_type":"code","source":"# Create 'death_rate_per_1000' and remove 'avgdeathsperyear'\ndata['death_rate_per_1000'] = data['avgdeathsperyear'] / data['popest2015'] * 1000\ndata['target_death_rate_per_1000'] = data['target_deathrate'] / data['popest2015'] * 1000\ndata['diagnosis_rate_per_1000'] = data['avganncount'] / data['popest2015'] * 1000\ndata['diagnosis_rate_against_incidence'] = data['avganncount'] / data['incidencerate']\n","metadata":{"execution":{"iopub.status.busy":"2024-04-19T18:11:51.453439Z","iopub.execute_input":"2024-04-19T18:11:51.453752Z","iopub.status.idle":"2024-04-19T18:11:51.466788Z","shell.execute_reply.started":"2024-04-19T18:11:51.453725Z","shell.execute_reply":"2024-04-19T18:11:51.465699Z"},"trusted":true},"execution_count":58,"outputs":[]},{"cell_type":"code","source":"data['distance_from_target'] = data['target_death_rate_per_1000'] - data['death_rate_per_1000'] ","metadata":{"execution":{"iopub.status.busy":"2024-04-19T18:11:51.469378Z","iopub.execute_input":"2024-04-19T18:11:51.469833Z","iopub.status.idle":"2024-04-19T18:11:51.480941Z","shell.execute_reply.started":"2024-04-19T18:11:51.469790Z","shell.execute_reply":"2024-04-19T18:11:51.479818Z"},"trusted":true},"execution_count":59,"outputs":[]},{"cell_type":"code","source":"data['mortality_from_diag'] = data['avgdeathsperyear']/ data['avganncount'] ","metadata":{"execution":{"iopub.status.busy":"2024-04-19T18:11:51.482201Z","iopub.execute_input":"2024-04-19T18:11:51.482529Z","iopub.status.idle":"2024-04-19T18:11:51.493142Z","shell.execute_reply.started":"2024-04-19T18:11:51.482503Z","shell.execute_reply":"2024-04-19T18:11:51.492339Z"},"trusted":true},"execution_count":60,"outputs":[]},{"cell_type":"code","source":"data.drop(['avgdeathsperyear', 'popest2015', 'target_deathrate', 'avganncount', 'mean_private_coverage',\n       'expected_private_coverage'], axis=1, inplace=True)\n","metadata":{"execution":{"iopub.status.busy":"2024-04-19T18:11:51.494918Z","iopub.execute_input":"2024-04-19T18:11:51.495425Z","iopub.status.idle":"2024-04-19T18:11:51.508847Z","shell.execute_reply.started":"2024-04-19T18:11:51.495396Z","shell.execute_reply":"2024-04-19T18:11:51.507853Z"},"trusted":true},"execution_count":61,"outputs":[]},{"cell_type":"code","source":"data.columns","metadata":{"execution":{"iopub.status.busy":"2024-04-19T18:11:51.509977Z","iopub.execute_input":"2024-04-19T18:11:51.510555Z","iopub.status.idle":"2024-04-19T18:11:51.521042Z","shell.execute_reply.started":"2024-04-19T18:11:51.510518Z","shell.execute_reply":"2024-04-19T18:11:51.519970Z"},"trusted":true},"execution_count":62,"outputs":[{"execution_count":62,"output_type":"execute_result","data":{"text/plain":"Index(['incidencerate', 'medincome', 'povertypercent', 'studypercap',\n       'binnedinc', 'medianage', 'medianagemale', 'medianagefemale',\n       'geography', 'percentmarried', 'pctnohs18_24', 'pcths18_24',\n       'pctsomecol18_24', 'pctbachdeg18_24', 'pcths25_over',\n       'pctbachdeg25_over', 'pctemployed16_over', 'pctunemployed16_over',\n       'pctprivatecoverage', 'pctprivatecoveragealone', 'pctempprivcoverage',\n       'pctpubliccoverage', 'pctpubliccoveragealone', 'pctwhite', 'pctblack',\n       'pctasian', 'pctotherrace', 'pctmarriedhouseholds', 'birthrate',\n       'statefips', 'countyfips', 'avghouseholdsize', 'death_rate_per_1000',\n       'target_death_rate_per_1000', 'diagnosis_rate_per_1000',\n       'diagnosis_rate_against_incidence', 'distance_from_target',\n       'mortality_from_diag'],\n      dtype='object')"},"metadata":{}}]},{"cell_type":"code","source":"# Select only numeric columns for correlation, excluding 'mortality_from_diag' itself\n# Drop any other non-numeric columns that cannot be used in correlation\nnumeric_features = data.select_dtypes(include=['number']).drop(columns=['mortality_from_diag'])\n\n# Compute correlations with 'mortality_from_diag'\ncorrelation_with_mortality = numeric_features.apply(lambda x: x.corr(data['mortality_from_diag']))\n\n# Get the feature with the highest absolute correlation\nmost_correlated_feature = correlation_with_mortality.abs().idxmax()\nstrongest_correlation_value = correlation_with_mortality[most_correlated_feature]\n\nprint(f\"The feature most strongly correlated with 'mortality_from_diag' is {most_correlated_feature} with a correlation coefficient of {strongest_correlation_value}.\")\n","metadata":{"execution":{"iopub.status.busy":"2024-04-19T18:11:51.523637Z","iopub.execute_input":"2024-04-19T18:11:51.524080Z","iopub.status.idle":"2024-04-19T18:11:51.551349Z","shell.execute_reply.started":"2024-04-19T18:11:51.524049Z","shell.execute_reply":"2024-04-19T18:11:51.550068Z"},"trusted":true},"execution_count":63,"outputs":[{"name":"stdout","text":"The feature most strongly correlated with 'mortality_from_diag' is diagnosis_rate_per_1000 with a correlation coefficient of -0.5581318720034834.\n","output_type":"stream"}]},{"cell_type":"code","source":"# Select only numeric columns for correlation, excluding 'death_rate_per_1000' itself\n# Drop any other non-numeric columns that cannot be used in correlation\nnumeric_features = data.select_dtypes(include=['number']).drop(columns=['death_rate_per_1000'])\n\n# Compute correlations with 'mortality_from_diag'\ncorrelation_with_mortality = numeric_features.apply(lambda x: x.corr(data['death_rate_per_1000']))\n\n# Get the feature with the highest absolute correlation\nmost_correlated_feature = correlation_with_mortality.abs().idxmax()\nstrongest_correlation_value = correlation_with_mortality[most_correlated_feature]\n\nprint(f\"The feature most strongly correlated with 'death_rate_per_1000' is {most_correlated_feature} with a correlation coefficient of {strongest_correlation_value}.\")\n","metadata":{"execution":{"iopub.status.busy":"2024-04-19T18:11:51.552699Z","iopub.execute_input":"2024-04-19T18:11:51.553026Z","iopub.status.idle":"2024-04-19T18:11:51.580343Z","shell.execute_reply.started":"2024-04-19T18:11:51.552997Z","shell.execute_reply":"2024-04-19T18:11:51.579552Z"},"trusted":true},"execution_count":64,"outputs":[{"name":"stdout","text":"The feature most strongly correlated with 'death_rate_per_1000' is medianagefemale with a correlation coefficient of 0.718199286390004.\n","output_type":"stream"}]},{"cell_type":"code","source":"# Select only numeric columns for correlation, excluding 'mortality_from_diag' itself\n# Drop any other non-numeric columns that cannot be used in correlation\nnumeric_features = data.select_dtypes(include=['number']).drop(columns=['mortality_from_diag'])\n\n# Compute correlations with 'mortality_from_diag'\ncorrelation_with_mortality = numeric_features.apply(lambda x: x.corr(data['mortality_from_diag']))\n\n# Get the feature with the highest absolute correlation\nmost_correlated_feature = correlation_with_mortality.abs().idxmax()\nstrongest_correlation_value = correlation_with_mortality[most_correlated_feature]\n\nprint(f\"The feature most strongly correlated with 'mortality_from_diag' is {most_correlated_feature} with a correlation coefficient of {strongest_correlation_value}.\")\n","metadata":{"execution":{"iopub.status.busy":"2024-04-19T18:11:51.581387Z","iopub.execute_input":"2024-04-19T18:11:51.581854Z","iopub.status.idle":"2024-04-19T18:11:51.603192Z","shell.execute_reply.started":"2024-04-19T18:11:51.581826Z","shell.execute_reply":"2024-04-19T18:11:51.602170Z"},"trusted":true},"execution_count":65,"outputs":[{"name":"stdout","text":"The feature most strongly correlated with 'mortality_from_diag' is diagnosis_rate_per_1000 with a correlation coefficient of -0.5581318720034834.\n","output_type":"stream"}]},{"cell_type":"code","source":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\n# List of insurance coverage rates you want to correlate with diagnosis_rate_per_1000\ninsurance_features = [\n    'pctprivatecoverage',\n    'pctprivatecoveragealone',\n    'pctpubliccoverage',\n    'pctpubliccoveragealone'\n]\n\n# Add 'diagnosis_rate_per_1000' to the list for correlation calculation\nfeatures_to_correlate = insurance_features + ['diagnosis_rate_per_1000']\n\n# Calculate the correlation matrix for the selected features\ncorrelation_matrix = data[features_to_correlate].corr()\n\n# Create a heatmap to visualize the correlations\nplt.figure(figsize=(10, 8))\nsns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=\".2f\", cbar_kws={'label': 'Correlation Coefficient'})\nplt.title('Correlation Heatmap Between Diagnosis Rate and Insurance Coverage Rates')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-04-19T18:11:51.605219Z","iopub.execute_input":"2024-04-19T18:11:51.605855Z","iopub.status.idle":"2024-04-19T18:11:52.038242Z","shell.execute_reply.started":"2024-04-19T18:11:51.605825Z","shell.execute_reply":"2024-04-19T18:11:52.037373Z"},"trusted":true},"execution_count":66,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x800 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"# Select only numeric columns for correlation, excluding 'mortality_from_diag' itself\n# Drop any other non-numeric columns that cannot be used in correlation\nnumeric_features = data.select_dtypes(include=['number']).drop(columns=['diagnosis_rate_per_1000', 'mortality_from_diag', 'distance_from_target', 'target_death_rate_per_1000' ])\n\n# Compute correlations with 'mortality_from_diag'\ncorrelation_with_mortality = numeric_features.apply(lambda x: x.corr(data['diagnosis_rate_per_1000']))\n\n# Get the feature with the highest absolute correlation\nmost_correlated_feature = correlation_with_mortality.abs().idxmax()\nstrongest_correlation_value = correlation_with_mortality[most_correlated_feature]\n\nprint(f\"The feature most strongly correlated with 'diagnosis_rate_per_1000' is {most_correlated_feature} with a correlation coefficient of {strongest_correlation_value}.\")\n","metadata":{"execution":{"iopub.status.busy":"2024-04-19T18:12:02.004824Z","iopub.execute_input":"2024-04-19T18:12:02.005528Z","iopub.status.idle":"2024-04-19T18:12:02.030124Z","shell.execute_reply.started":"2024-04-19T18:12:02.005484Z","shell.execute_reply":"2024-04-19T18:12:02.029277Z"},"trusted":true},"execution_count":67,"outputs":[{"name":"stdout","text":"The feature most strongly correlated with 'diagnosis_rate_per_1000' is pctunemployed16_over with a correlation coefficient of -0.162615777989213.\n","output_type":"stream"}]},{"cell_type":"code","source":"from scipy.stats import pearsonr\n# Calculate the Pearson correlation and the p-value\ncorrelation, p_value = pearsonr(data['diagnosis_rate_per_1000'], data['pctunemployed16_over'])\n\nprint(f\"Correlation coefficient: {correlation}\")\nprint(f\"P-value: {p_value}\")\n\n# Assess the significance\nif p_value < 0.05:\n    print(\"The correlation is statistically significant.\")\nelse:\n    print(\"The correlation is not statistically significant.\")","metadata":{"execution":{"iopub.status.busy":"2024-04-19T18:12:03.683722Z","iopub.execute_input":"2024-04-19T18:12:03.684143Z","iopub.status.idle":"2024-04-19T18:12:03.694350Z","shell.execute_reply.started":"2024-04-19T18:12:03.684113Z","shell.execute_reply":"2024-04-19T18:12:03.693337Z"},"trusted":true},"execution_count":68,"outputs":[{"name":"stdout","text":"Correlation coefficient: -0.16261577798921312\nP-value: 1.6728298895378965e-19\nThe correlation is statistically significant.\n","output_type":"stream"}]},{"cell_type":"code","source":"data['unemp_insurance_interaction_public'] = data['pctunemployed16_over'] * data['pctpubliccoverage']\ndata['unemp_insurance_interaction_private'] = data['pctunemployed16_over'] * data['pctprivatecoverage']\ndata['unemp_income_interaction'] = data['pctunemployed16_over'] * data['medincome']\ndata['insurance_gap'] = data['pctprivatecoverage'] - data['pctpubliccoverage']\n\n\n","metadata":{"execution":{"iopub.status.busy":"2024-04-19T18:12:09.235145Z","iopub.execute_input":"2024-04-19T18:12:09.236381Z","iopub.status.idle":"2024-04-19T18:12:09.244428Z","shell.execute_reply.started":"2024-04-19T18:12:09.236318Z","shell.execute_reply":"2024-04-19T18:12:09.243388Z"},"trusted":true},"execution_count":70,"outputs":[]},{"cell_type":"code","source":"\nfrom sklearn.preprocessing import PolynomialFeatures\n\n\n# Initialize PolynomialFeatures\npoly = PolynomialFeatures(degree=2, include_bias=False)\n\n# Selecting key features for polynomial transformation\nkey_features = data[['pctunemployed16_over', 'pctpubliccoverage', 'pctprivatecoverage']]\n\n# Generate polynomial features\npoly_features = poly.fit_transform(key_features)\n\n# Get the new feature names\npoly_feature_names = poly.get_feature_names_out(key_features.columns)\n\n# Create a DataFrame with the new polynomial features\npoly_features_df = pd.DataFrame(poly_features, columns=poly_feature_names)\n\n# Join the new polynomial features to the original DataFrame\n# Resolve column name overlap by using suffixes\n#data = data.join(poly_features_df, rsuffix='_poly')\n\n#  Optional drop original features that were used to generate polynomial features if needed\n#data.drop(['pctunemployed16_over', 'pctpubliccoverage', 'pctprivatecoverage'], axis=1, inplace=True)\n\n#print(data.head())  # Displaying the first few rows to check the new DataFrame structure\n","metadata":{"execution":{"iopub.status.busy":"2024-04-19T18:12:11.220440Z","iopub.execute_input":"2024-04-19T18:12:11.220867Z","iopub.status.idle":"2024-04-19T18:12:11.234115Z","shell.execute_reply.started":"2024-04-19T18:12:11.220838Z","shell.execute_reply":"2024-04-19T18:12:11.232783Z"},"trusted":true},"execution_count":71,"outputs":[]},{"cell_type":"code","source":"data.columns\n","metadata":{"execution":{"iopub.status.busy":"2024-04-19T18:12:15.526934Z","iopub.execute_input":"2024-04-19T18:12:15.527405Z","iopub.status.idle":"2024-04-19T18:12:15.535653Z","shell.execute_reply.started":"2024-04-19T18:12:15.527369Z","shell.execute_reply":"2024-04-19T18:12:15.534428Z"},"trusted":true},"execution_count":72,"outputs":[{"execution_count":72,"output_type":"execute_result","data":{"text/plain":"Index(['incidencerate', 'medincome', 'povertypercent', 'studypercap',\n       'binnedinc', 'medianage', 'medianagemale', 'medianagefemale',\n       'geography', 'percentmarried', 'pctnohs18_24', 'pcths18_24',\n       'pctsomecol18_24', 'pctbachdeg18_24', 'pcths25_over',\n       'pctbachdeg25_over', 'pctemployed16_over', 'pctunemployed16_over',\n       'pctprivatecoverage', 'pctprivatecoveragealone', 'pctempprivcoverage',\n       'pctpubliccoverage', 'pctpubliccoveragealone', 'pctwhite', 'pctblack',\n       'pctasian', 'pctotherrace', 'pctmarriedhouseholds', 'birthrate',\n       'statefips', 'countyfips', 'avghouseholdsize', 'death_rate_per_1000',\n       'target_death_rate_per_1000', 'diagnosis_rate_per_1000',\n       'diagnosis_rate_against_incidence', 'distance_from_target',\n       'mortality_from_diag', 'unemp_insurance_interaction_public',\n       'unemp_insurance_interaction_private', 'unemp_income_interaction',\n       'insurance_gap'],\n      dtype='object')"},"metadata":{}}]},{"cell_type":"code","source":"# Select only numeric columns for calculating correlations\nnumeric_data = data.select_dtypes(include=[np.number])\n\n# Calculate the correlation matrix for the numeric dataset\ncorrelation_matrix = numeric_data.corr()\n\n# Focus on correlations with 'death_rate_per_1000'\ncorrelations_with_death_rate = correlation_matrix['death_rate_per_1000'].abs().sort_values(ascending=False)\n\n# List of features to exclude to prevent data leakage\nfeatures_to_exclude = [\n    'death_rate_per_1000', \n    'target_death_rate_per_1000',  # Directly related to target\n    'distance_from_target',        # Derived from target\n    'mortality_from_diag'          # Directly measures outcome similar to target\n]\n\n# Remove these features from the correlation series\nfiltered_correlations = correlations_with_death_rate.drop(labels=features_to_exclude, errors='ignore')\n\n# Get the top 10 features\ntop_15_features = filtered_correlations.head(15)\nprint(\"Top 15 features most correlated with death_rate_per_1000:\")\nprint(top_15_features)\n","metadata":{"execution":{"iopub.status.busy":"2024-04-19T18:12:17.806080Z","iopub.execute_input":"2024-04-19T18:12:17.806509Z","iopub.status.idle":"2024-04-19T18:12:17.834809Z","shell.execute_reply.started":"2024-04-19T18:12:17.806478Z","shell.execute_reply":"2024-04-19T18:12:17.833497Z"},"trusted":true},"execution_count":73,"outputs":[{"name":"stdout","text":"Top 15 features most correlated with death_rate_per_1000:\nmedianagefemale                       0.718199\nmedianagemale                         0.669798\npctpubliccoverage                     0.625699\navghouseholdsize                      0.559891\npcths25_over                          0.523673\nmedincome                             0.481910\npctbachdeg25_over                     0.459435\npctempprivcoverage                    0.413621\ninsurance_gap                         0.413225\npctprivatecoveragealone               0.406039\npctemployed16_over                    0.390405\npctasian                              0.353250\npctpubliccoveragealone                0.315031\npctotherrace                          0.307237\nunemp_insurance_interaction_public    0.268876\nName: death_rate_per_1000, dtype: float64\n","output_type":"stream"}]},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report, accuracy_score\nfrom sklearn.preprocessing import StandardScaler\n\n# Assuming 'mortality_from_diag' has already been calculated and exists in dataset\n# Define the target variable based on some criteria, e.g., high mortality\ndata['high_risk'] = (data['death_rate_per_1000'] > data['death_rate_per_1000'].median()).astype(int)\n\n# Define predictor variables\nfeatures = [\n    'pctunemployed16_over',  # Existing feature\n    'pctpubliccoverage',     # Existing feature\n    'pctprivatecoverage',    # Existing feature\n    'medincome',             # Existing feature\n    'povertypercent',        # Existing feature\n    'medianagefemale',       # Highly correlated\n    'medianagemale',         # Highly correlated\n    'avghouseholdsize',      # Highly correlated\n    'pcths25_over',          # Highly correlated\n    'pctbachdeg25_over',     # Highly correlated\n    'pctempprivcoverage',    # Highly correlated\n    'insurance_gap',         # Derived feature showing difference in coverages\n    'pctprivatecoveragealone',  # Highly correlated\n    'pctemployed16_over',    # Moderately correlated\n    'pctpubliccoveragealone' # Coverage feature\n    # Consider adding or removing features based on model performance and domain knowledge\n]\n\n# Add polynomial features \n#features += ['pctunemployed16_over_poly', 'pctpubliccoverage_poly', 'pctprivatecoverage_poly']  # Uncomment if these are the correct names\n\n# Prepare the feature data and target data\nX = data[features]\ny = data['high_risk']\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\n# Scale the feature data\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)\n\n# Initialize and train the logistic regression model\nmodel = LogisticRegression()\nmodel.fit(X_train_scaled, y_train)\n\n# Predict on the test set\ny_pred = model.predict(X_test_scaled)\n\n# Evaluate the model\nprint(\"Accuracy:\", accuracy_score(y_test, y_pred))\nprint(classification_report(y_test, y_pred))\n\n# Additional model insights\ncoefficients = pd.DataFrame(model.coef_, columns=features)\nprint(\"Model coefficients:\\n\", coefficients)\n","metadata":{"execution":{"iopub.status.busy":"2024-04-19T18:12:25.909030Z","iopub.execute_input":"2024-04-19T18:12:25.909487Z","iopub.status.idle":"2024-04-19T18:12:26.000109Z","shell.execute_reply.started":"2024-04-19T18:12:25.909452Z","shell.execute_reply":"2024-04-19T18:12:25.998621Z"},"trusted":true},"execution_count":74,"outputs":[{"name":"stdout","text":"Accuracy: 0.8469945355191257\n              precision    recall  f1-score   support\n\n           0       0.86      0.83      0.85       460\n           1       0.84      0.86      0.85       455\n\n    accuracy                           0.85       915\n   macro avg       0.85      0.85      0.85       915\nweighted avg       0.85      0.85      0.85       915\n\nModel coefficients:\n    pctunemployed16_over  pctpubliccoverage  pctprivatecoverage  medincome  \\\n0              0.073815           1.538315            0.197052  -1.132257   \n\n   povertypercent  medianagefemale  medianagemale  avghouseholdsize  \\\n0       -0.436404         1.229378      -0.073139         -0.623372   \n\n   pcths25_over  pctbachdeg25_over  pctempprivcoverage  insurance_gap  \\\n0      0.355899          -0.698988            0.266773      -0.580168   \n\n   pctprivatecoveragealone  pctemployed16_over  pctpubliccoveragealone  \n0                -0.102673            0.552342                -0.86521  \n","output_type":"stream"}]},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report, accuracy_score\nfrom sklearn.preprocessing import StandardScaler\n\n\n# Define the target variable based on some criteria, e.g., high mortality\ndata['exceeds_target'] = (data['death_rate_per_1000'] > data['target_death_rate_per_1000']).astype(int)\n\n# Define predictor variables\nfeatures = [\n    'pctunemployed16_over',  # Existing feature\n    'pctpubliccoverage',     # Existing feature\n    'pctprivatecoverage',    # Existing feature\n    'medincome',             # Existing feature\n    'povertypercent',        # Existing feature\n    'medianagefemale',       # Highly correlated\n    'medianagemale',         # Highly correlated\n    'avghouseholdsize',      # Highly correlated\n    'pcths25_over',          # Highly correlated\n    'pctbachdeg25_over',     # Highly correlated\n    'pctempprivcoverage',    # Highly correlated\n    'insurance_gap',         # Derived feature showing difference in coverages\n    'pctprivatecoveragealone',  # Highly correlated\n    'pctemployed16_over',    # Moderately correlated\n    'pctpubliccoveragealone' # Coverage feature\n    \n]\n\nX = data[features]\ny = data['exceeds_target']\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\n# Scale features\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)\n\n# Train a logistic regression model\nmodel = LogisticRegression()\nmodel.fit(X_train_scaled, y_train)\n\n# Predict and evaluate the model\ny_pred = model.predict(X_test_scaled)\nprint(\"Model Accuracy:\", accuracy_score(y_test, y_pred))\nprint(classification_report(y_test, y_pred))\n\n# Output the coefficients for interpretation\ncoefficients = pd.DataFrame(model.coef_[0], index=features, columns=['Coefficient'])\nprint(\"Model Coefficients:\\n\", coefficients)","metadata":{"execution":{"iopub.status.busy":"2024-04-19T18:12:28.552753Z","iopub.execute_input":"2024-04-19T18:12:28.553163Z","iopub.status.idle":"2024-04-19T18:12:28.630457Z","shell.execute_reply.started":"2024-04-19T18:12:28.553133Z","shell.execute_reply":"2024-04-19T18:12:28.629009Z"},"trusted":true},"execution_count":75,"outputs":[{"name":"stdout","text":"Model Accuracy: 0.8622950819672132\n              precision    recall  f1-score   support\n\n           0       0.89      0.94      0.92       731\n           1       0.70      0.56      0.62       184\n\n    accuracy                           0.86       915\n   macro avg       0.80      0.75      0.77       915\nweighted avg       0.85      0.86      0.86       915\n\nModel Coefficients:\n                          Coefficient\npctunemployed16_over        0.765425\npctpubliccoverage           0.273775\npctprivatecoverage         -0.158491\nmedincome                  -0.107004\npovertypercent             -1.010338\nmedianagefemale             0.514852\nmedianagemale              -1.004854\navghouseholdsize           -0.008799\npcths25_over               -0.551270\npctbachdeg25_over           0.983808\npctempprivcoverage          1.304245\ninsurance_gap              -0.223845\npctprivatecoveragealone    -0.234476\npctemployed16_over         -0.185019\npctpubliccoveragealone      0.648348\n","output_type":"stream"}]},{"cell_type":"markdown","source":"","metadata":{}}]}